# Generated by Django 4.2.10 on 2024-03-22 17:05

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('example', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('library_name', models.CharField(max_length=200)),
                ('description', models.TextField(default=None, null=True)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('category', models.CharField(db_index=True, default='custom', max_length=200)),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeveloperProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('example.developer',),
        ),
        migrations.CreateModel(
            name='VideoAsset',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_base', models.IntegerField(default=600)),
                ('duration', models.IntegerField(default=None)),
                ('library', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='example.library')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedItemDefaultUUID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('confidence', models.FloatField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_tagged_items_default_uuid', to='example.tag')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('confidence', models.FloatField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_tagged_items', to='example.tag')),
            ],
        ),
        migrations.CreateModel(
            name='SegmentProperTags',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('in_time', models.IntegerField()),
                ('out_time', models.IntegerField()),
                ('in_time_base', models.IntegerField(default=100)),
                ('out_time_base', models.IntegerField(default=100)),
                ('category', models.CharField(db_index=True, max_length=200)),
                ('description', models.TextField(null=True)),
                ('transcript', models.TextField(null=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='example.TaggedItemDefaultUUID', to='example.Tag', verbose_name='Tags')),
                ('video_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='example.videoasset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='taggeditemdefaultuuid',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id', 'tag'), name='taggit_taggeditem_content_type_id_object_id_tag_id_4bb97a8e_uniq2'),
        ),
        migrations.AddConstraint(
            model_name='taggeditem',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id', 'tag'), name='taggit_taggeditem_content_type_id_object_id_tag_id_4bb97a8e_uniq1'),
        ),
    ]
